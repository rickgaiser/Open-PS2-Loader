/*
	Copyright 2009-2010, Ifcaro, jimmikaelkael & Polo
	Copyright 2006-2008 Polo
	Licenced under Academic Free License version 3.0
	Review OPNPS2LD README & LICENSE files for further details.
	
	Copyright 2001-2004, ps2dev - http://www.ps2dev.org
	Licenced under Academic Free License version 2.0
	Review ps2sdk README & LICENSE files for further details.
	
	Standard linkfile
*/

ENTRY(_start);

MEMORY {
	ram82	: ORIGIN = 0x00082000, LENGTH =  24K /* 0x00082000 - 0x00088000: probably free */
	ram88	: ORIGIN = 0x00088000, LENGTH =  60K /* 0x00088000 - 0x00097000: free */
	ramD0	: ORIGIN = 0x000D0000, LENGTH = 192K /* 0x000D0000 - 0x00100000: probably free */
}

SECTIONS {
	.igs_engine : {
		libmc.*(*)
		igs_api.*(*)
	} >ram82

	.text : {
		_ftext = . ;
		*(EXCLUDE_FILE (libmc.*).text)
		*(EXCLUDE_FILE (libmc.*).text.*)
		*(.gnu.linkonce.t*)
		KEEP(*(.init))
		KEEP(*(.fini))
		QUAD(0)
	} >ram88

	PROVIDE(_etext = .);
	PROVIDE(etext = .);

	.reginfo : { *(.reginfo) } >ram88

	/* Global/static constructors and deconstructors. */
	.ctors ALIGN(16): {
		KEEP(*crtbegin*.o(.ctors))
		KEEP(*(EXCLUDE_FILE(*crtend*.o) .ctors))
		KEEP(*(SORT(.ctors.*)))
		KEEP(*(.ctors))
	} >ram88
	.dtors ALIGN(16): {
		KEEP(*crtbegin*.o(.dtors))
		KEEP(*(EXCLUDE_FILE(*crtend*.o) .dtors))
		KEEP(*(SORT(.dtors.*)))
		KEEP(*(.dtors))
	} >ram88

	/* Static data.  */
	.rodata ALIGN(128): {
		*(.rodata)
		*(.rodata.*)
		*(.gnu.linkonce.r*)
	} >ram88

	.data ALIGN(128): {
		_fdata = . ;
		*(.data)
		*(.data.*)
		*(.gnu.linkonce.d*)
		SORT(CONSTRUCTORS)
	} >ram88

	.rdata ALIGN(128): { *(.rdata) } >ram88
	.gcc_except_table ALIGN(128): { *(.gcc_except_table) } >ram88

	_gp = ALIGN(128) + 0x7ff0;
	.lit4 ALIGN(128): { *(.lit4) } >ram88
	.lit8 ALIGN(128): { *(.lit8) } >ram88

	.sdata ALIGN(128): {
		*(.sdata)
		*(.sdata.*)
		*(.gnu.linkonce.s*)
	} >ram88

	_edata = .;
	PROVIDE(edata = .);

	/* Uninitialized data.  */
	.sbss ALIGN(128) : {
		_fbss = . ;
		*(.sbss)
		*(.sbss.*)
		*(.gnu.linkonce.sb*)
		*(.scommon)
	} >ram88

	.bss ALIGN(128) : {
		*(.bss)
		*(.bss.*)
		*(.gnu.linkonce.b*)
		*(COMMON)
	} >ram88
	_end_bss = .;

	/* Symbols needed by crt0.s.  */
	PROVIDE(_heap_size = -1);
	PROVIDE(_stack = .);
	PROVIDE(_stack_size = 0x00097000 - _stack);	/* Any remaining space up to the module storage region, is available for the stack. */

	_end = _stack + _stack_size ;
	PROVIDE(end = _end);
}
